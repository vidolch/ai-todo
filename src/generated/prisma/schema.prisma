generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  emailVerified String?
  isActive      Boolean    @default(true)
  lastLogin     DateTime?
  preferences   Json?
  role          String     @default("USER")
  accounts      Account[]
  sessions      Session[]
  tags          Tag[]
  tasks         Task[]
  lists         UserList[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model List {
  id          String     @id @default(cuid())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  color       String?
  description String?
  tasks       Task[]
  users       UserList[]
}

model UserList {
  id        String            @id @default(cuid())
  role      CollaborationRole @default(CONTRIBUTOR)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    String
  listId    String
  list      List              @relation(fields: [listId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listId])
  @@index([userId])
  @@index([listId])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueDate     DateTime?
  userId      String
  listId      String?
  severity    String    @default("normal")
  parentId    String?
  list        List?     @relation(fields: [listId], references: [id])
  parent      Task?     @relation("TaskSubtask", fields: [parentId], references: [id], onDelete: Cascade)
  subtasks    Task[]    @relation("TaskSubtask")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        Tag[]     @relation("TagToTask")

  @@index([userId])
  @@index([listId])
  @@index([parentId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  color     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]   @relation("TagToTask")

  @@index([userId])
}

enum CollaborationRole {
  OWNER
  CONTRIBUTOR
}
